 Create a Web Api solution using .Net 8.
• All data in your solution should be persisted in a database. Use Entity Framework Core
Code first approach.
• Create a layered architecture following the Service-Repository pattern and implement 
the requirements in the 3 layers appropriately: Data, Service and WebApi layers (feel 
free to use other naming convention for your layers as preferable).
• Create the necessary entities: Client and Car.
• Client should have the following properties: Autogenerated PK Id, First Name, Last 
Name, DOB, Address, Nationality, Rental Start Date, Rental End Date an FK Car Id which 
will be the connection to the Cars table. 
• On the Client entity set the following restrictions: Client Id should be autogenerated, all 
other properties (First Name, Last Name, DOB, Address, Nationality, Rental Start Date, 
Rental End Date) should be required, First Name should have max length of 200 chars 
and Last Name should have max length of 400 chars, Address should have max length of 
500 chars. 
• Car should have the following properties: Autogenerated PK Id, License Plate, Model,
Manufacturer, Year.
• On the Car entity set the following restrictions: Car Id should be autogenerated, all other 
properties (License Plate, Model, Manufacturer, Year) should be required.
• Each Client is allowed to rent one Car at the same time only.
• Create the two appropriate interfaces and define methods for get all, get by Id, create, 
update and delete for Client and Car.
• Create DTOs for the Client and Car. 
• Create two services and implement the interfaces for Client and Car, so that they can be 
called as services.
• Create two API controllers for Client and Car CRUD methods using the services and add 
appropriate implementation using DI and IOC.
• Implement the ClientRepository and CarRepository. 
• Implement the two interfaces IClientRepository and ICarRespository respectively in the 
correct layer.
Internet Services Final Exam
• Use the created repositories and appropriate interfaces to communicate and 
manipulate the data in the database using DI and IOC. 
• Create a Test project and implement a few Unit tests. 
• For the ClientService create at least 3 Unit tests.
• For the CarService create at least 3 Unit tests.
• Run the Unit tests and make sure that they run successfully.
Give me Clean Architecture and Generate Code