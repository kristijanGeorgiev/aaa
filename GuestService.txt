using AutoMapper;
using HotelRoomManagement.Application.DTOs;
using HotelRoomManagement.Application.Interfaces;
using HotelRoomManagement.Infrastructure.Entities;
using HotelRoomManagement.Infrastructure.Interfaces;

namespace HotelRoomManagement.Application.Services
{
    public class GuestService : IGuestService
    {
        private readonly IGuestRepository _repository;
        private readonly IMapper _mapper;

        public GuestService(IGuestRepository repository, IMapper mapper)
        {
            _repository = repository;
            _mapper = mapper;
        }

        public async Task<IEnumerable<GuestDto>> GetAllAsync()
        {
            var guests = await _repository.GetAllAsync();
            return _mapper.Map<IEnumerable<GuestDto>>(guests);
        }

        public async Task<GuestDto> GetByIdAsync(int id)
        {
            var guest = await _repository.GetByIdAsync(id);
            return _mapper.Map<GuestDto>(guest);
        }

        public async Task<GuestDto> CreateAsync(GuestDto guestDto)
        {
            var guest = _mapper.Map<Guest>(guestDto);
            var createdGuest = await _repository.CreateAsync(guest);
            return _mapper.Map<GuestDto>(createdGuest);
        }

        public async Task<bool> UpdateAsync(int id, GuestDto guestDto)
        {
            var guest = _mapper.Map<Guest>(guestDto);
            guest.Id = id;
            return await _repository.UpdateAsync(guest);
        }

        public async Task<bool> DeleteAsync(int id)
        {
            return await _repository.DeleteAsync(id);
        }
    }
}
