// Clean Architecture Project Structure:
// - CarRental.API (Web API Layer)
// - CarRental.Application (DTOs, Interfaces, Services)
// - CarRental.Domain (Entities)
// - CarRental.Infrastructure (EF Core, Repositories)
// - CarRental.Tests (Unit Tests)

// ---------------------- DOMAIN LAYER ----------------------
// File: Domain/Entities/Client.cs
namespace CarRental.Domain.Entities
{
    public class Client
    {
        public int Id { get; set; }

        [Required, MaxLength(200)]
        public string FirstName { get; set; } = null!;

        [Required, MaxLength(400)]
        public string LastName { get; set; } = null!;

        [Required]
        public DateTime DOB { get; set; }

        [Required, MaxLength(500)]
        public string Address { get; set; } = null!;

        [Required]
        public string Nationality { get; set; } = null!;

        [Required]
        public DateTime RentalStartDate { get; set; }

        [Required]
        public DateTime RentalEndDate { get; set; }

        [Required]
        public int CarId { get; set; }

        public Car Car { get; set; } = null!;
    }
}

// File: Domain/Entities/Car.cs
namespace CarRental.Domain.Entities
{
    public class Car
    {
        public int Id { get; set; }

        [Required]
        public string LicensePlate { get; set; } = null!;

        [Required]
        public string Model { get; set; } = null!;

        [Required]
        public string Manufacturer { get; set; } = null!;

        [Required]
        public int Year { get; set; }

        public ICollection<Client> Clients { get; set; } = new List<Client>();
    }
}

// ---------------------- APPLICATION LAYER ----------------------
// File: Application/DTOs/ClientDto.cs
namespace CarRental.Application.DTOs
{
    public class ClientDto
    {
        public int Id { get; set; }
        public string FirstName { get; set; } = null!;
        public string LastName { get; set; } = null!;
        public DateTime DOB { get; set; }
        public string Address { get; set; } = null!;
        public string Nationality { get; set; } = null!;
        public DateTime RentalStartDate { get; set; }
        public DateTime RentalEndDate { get; set; }
        public int CarId { get; set; }
    }
}

// File: Application/DTOs/CarDto.cs
namespace CarRental.Application.DTOs
{
    public class CarDto
    {
        public int Id { get; set; }
        public string LicensePlate { get; set; } = null!;
        public string Model { get; set; } = null!;
        public string Manufacturer { get; set; } = null!;
        public int Year { get; set; }
    }
}

// File: Application/Interfaces/IClientService.cs
public interface IClientService
{
    Task<IEnumerable<ClientDto>> GetAllAsync();
    Task<ClientDto> GetByIdAsync(int id);
    Task<ClientDto> CreateAsync(ClientDto dto);
    Task<bool> UpdateAsync(int id, ClientDto dto);
    Task<bool> DeleteAsync(int id);
}

// File: Application/Interfaces/ICarService.cs
public interface ICarService
{
    Task<IEnumerable<CarDto>> GetAllAsync();
    Task<CarDto> GetByIdAsync(int id);
    Task<CarDto> CreateAsync(CarDto dto);
    Task<bool> UpdateAsync(int id, CarDto dto);
    Task<bool> DeleteAsync(int id);
}

// File: Application/Mappings/MappingProfile.cs
using AutoMapper;
using CarRental.Application.DTOs;
using CarRental.Domain.Entities;

public class MappingProfile : Profile
{
    public MappingProfile()
    {
        CreateMap<Client, ClientDto>().ReverseMap();
        CreateMap<Car, CarDto>().ReverseMap();
    }
}

// File: Application/Services/ClientService.cs
public class ClientService : IClientService
{
    private readonly IClientRepository _repo;
    private readonly IMapper _mapper;

    public ClientService(IClientRepository repo, IMapper mapper)
    {
        _repo = repo;
        _mapper = mapper;
    }

    public async Task<IEnumerable<ClientDto>> GetAllAsync()
    {
        var clients = await _repo.GetAllAsync();
        return _mapper.Map<IEnumerable<ClientDto>>(clients);
    }

    public async Task<ClientDto> GetByIdAsync(int id)
    {
        var client = await _repo.GetByIdAsync(id);
        return _mapper.Map<ClientDto>(client);
    }

    public async Task<ClientDto> CreateAsync(ClientDto dto)
    {
        var client = _mapper.Map<Client>(dto);
        var created = await _repo.CreateAsync(client);
        return _mapper.Map<ClientDto>(created);
    }

    public async Task<bool> UpdateAsync(int id, ClientDto dto)
    {
        var client = _mapper.Map<Client>(dto);
        client.Id = id;
        return await _repo.UpdateAsync(client);
    }

    public async Task<bool> DeleteAsync(int id)
    {
        return await _repo.DeleteAsync(id);
    }
}

// File: Application/Services/CarService.cs
public class CarService : ICarService
{
    private readonly ICarRepository _repo;
    private readonly IMapper _mapper;

    public CarService(ICarRepository repo, IMapper mapper)
    {
        _repo = repo;
        _mapper = mapper;
    }

    public async Task<IEnumerable<CarDto>> GetAllAsync()
    {
        var cars = await _repo.GetAllAsync();
        return _mapper.Map<IEnumerable<CarDto>>(cars);
    }

    public async Task<CarDto> GetByIdAsync(int id)
    {
        var car = await _repo.GetByIdAsync(id);
        return _mapper.Map<CarDto>(car);
    }

    public async Task<CarDto> CreateAsync(CarDto dto)
    {
        var car = _mapper.Map<Car>(dto);
        var created = await _repo.CreateAsync(car);
        return _mapper.Map<CarDto>(created);
    }

    public async Task<bool> UpdateAsync(int id, CarDto dto)
    {
        var car = _mapper.Map<Car>(dto);
        car.Id = id;
        return await _repo.UpdateAsync(car);
    }

    public async Task<bool> DeleteAsync(int id)
    {
        return await _repo.DeleteAsync(id);
    }
}
